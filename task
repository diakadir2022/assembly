.model small
.stack 100h
.data
msg db "Enter a decimal number (0 to exit): $"
input db 7 dup(0)
newline db 13, 10, "$"
binMsg db "Binary: $"
.code
main:
mov ax, @data
mov ds, ax

start_input:
mov ah, 09h
lea dx, msg
int 21h

lea dx, input
mov ah, 0Ah
mov dx, offset input
mov input, 6
mov input+1, 0
int 21h

lea si, input+2
call atoi
mov cx, ax

cmp ax, 0
je exit

mov ah, 09h
lea dx, binMsg
int 21h

mov ax, cx
call printBinary

mov ah, 09h
lea dx, newline
int 21h

jmp start_input

exit:
mov ah, 4ch
int 21h

atoi:
xor ax, ax
xor bx, bx
xor cx, cx
mov bx, 10

next_digit:
mov cl, [si]
cmp cl, 0Dh
je done_atoi
cmp cl, 0Ah
je done_atoi
cmp cl, 0
je done_atoi

sub cl, '0'
mul bx
add ax, cx
inc si
jmp next_digit

done_atoi:
ret

printBinary:
mov bx, 16
mov si, offset input

mov cx, 16
print_loop:
shl ax, 1
jc one
mov dl, '0'
jmp print_digit
one:
mov dl, '1'
print_digit:
mov ah, 02h
int 21h
loop print_loop
ret
